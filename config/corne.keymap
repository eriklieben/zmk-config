/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <25 26>;
            layers = <0>;
        };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <26 27>;
            layers = <0>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <27 28>;
            layers = <0>;
        };

        caps_words {
            bindings = <&caps_words>;
            key-positions = <16 19>;
            layers = <0>;
        };

        caps_lock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <17 18>;
            layers = <0>;
        };

        reset_bluetooth {
            bindings = <&bt BT_CLR>;
            key-positions = <5 6>;
            layers = <2>;
        };
    };

    behaviors {
        caps_words: caps_words {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS_WORDS";
            #binding-cells = <0>;
            continue-list = <UNDERSCORE MINUS>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE        &kp Q  &kp W  &kp E  &kp R          &kp T          &kp Y    &kp U                 &kp I     &kp O      &kp P     &kp BACKSLASH
&mt LEFT_GUI TAB  &kp A  &kp S  &kp D  &kp F          &kp G          &kp H    &kp J                 &kp K     &kp L      &kp SEMI  &kp SQT
&kp LCTRL         &kp Z  &kp X  &kp C  &kp V          &kp B          &kp N    &kp M                 &kp FSLH  &kp COMMA  &kp DOT   &kp RIGHT_SHIFT
                                &mo 1  &kp BACKSPACE  &lt 3 SPACE    &kp RET  &mt RIGHT_ALT DELETE  &mo 2
            >;
        };

        symbols {
            bindings = <
&kp PERIOD  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT     &kp CARET       &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE
&trans      &kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5    &kp MINUS       &kp EQUAL      &kp GRAVE     &kp LEFT_BRACE        &kp RIGHT_BRACE        &mt RIGHT_ALT PIPE
&trans      &kp NUMBER_6     &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0    &kp UNDERSCORE  &kp PLUS       &kp TILDE     &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans
                                           &trans        &trans        &trans          &trans          &trans         &trans
            >;
        };

        nav {
            bindings = <
&trans  &kp F1      &kp F2      &kp F3         &kp F4          &kp F5    &kp F6          &kp F7         &kp F8        &kp F9     &kp F10  &kp LG(L)
&trans  &trans      &trans      &kp LS(LC(B))  &kp LC(PERIOD)  &trans    &kp LEFT_ARROW  &kp DOWN       &kp UP_ARROW  &kp RIGHT  &kp F11  &trans
&trans  &bt BT_PRV  &bt BT_NXT  &out OUT_TOG   &trans          &trans    &kp HOME        &kp PAGE_DOWN  &kp PAGE_UP   &kp END    &kp F12  &trans
                                &trans         &trans          &trans    &trans          &trans         &trans
            >;
        };

        linux {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
